; complex test:
; factorial via fix combinator.

; let fix f =
;   let rec g = f g in (* construct partial application object, fixing self *)
;   g ;;
; let factorial =
;   fix (fun r acc n ->
;     if n = 0
;       then acc
;       else r (acc*n) (n - 1)) 1;;
; factorial 5
; ==> 120

fix_closure:
  .closure fix 1
fix:
  ; Partially apply f to NIL to get a PAP,
  ; then set that PAP's first fix to itself.
  ; A crash (probably) results if f's arity is only 1,
  ; as it will be expecting a function argument but receive nil instead.
  ; There are only three possible intended semantics for f of arity 1:
  ;   1. Goes into an infinite loop: the "partial" application will crash.
  ;   2. Returns a constant which is not the argument: everything will work.
  ;   3. Returns the argument: the following SFLD will crash.
  NIL           ; capture dummy value in PAP
  SWAP          ; swap f to top of stack
  CAP1          ; hopefully construct PAP(f.arity-1, f, nil)
  DUP DUP       ; #1=PAP(a,f,nil) #1# #1#
  SFLD2         ; #1=PAP(a,f,#1#)
  RET

factorial.anon1_closure:
  .closure factorial.anon1 3
factorial.anon1: ; lcl[0] = n, lcl[1] = acc, lcl[2] = r
  SYS 0
  LLCL0 IFEQ factorial.anon1$L1
  LLCL0 I1 SUB
    LLCL1 LLCL0 MUL
    LLCL2 CTL2
factorial.anon1$L1:
  POP RET

_start:
  I1
  LDG factorial.anon1_closure
  FASTAP fix_closure  ; stack: 1, fix(fun...)
  CAP1                ; lcl[0] = factorial
  LD 5
  SWAP
  CAP1
  HLT
