                                      # ; wozmon.s
                                      # ; Port of Steve Wozniak's Woz Monitor to ETCa
                                      # 
                                      #                 .include "ss.cfg"
                                      # ; Configuration file for AbelianGrape's "Sim Speed" ETCa builds. This file
                                      # ; is included by the first line of wozmon.s.
                                      # 
                                      # ; Defining SET_VEC would tell wozmon.s that an interrupt vector needs to be
                                      # ; set to cause a reset in the event of a fault. The "Sim Speed" builds don't
                                      # ; support INT, so this doesn't need to be set.
                                      # ; .set SET_VEC, 1
                                      # 
                                      # ; Defining CUSTOM_ECHO would tell wozmon.s to include echo.s (a file which
                                      # ; you can implement to contain a suitable ECHO function for your machine).
                                      # ; See the included echo.s for the Grape1 architecture.
                                      # 
                                      # ; This address, if set, is where wozmon will place any variables that it
                                      # ; needs access to in memory. This space consumes N+6 bytes, where N is
                                      # ; the desired size of the input buffer. Wozmon only checks that input lines
                                      # ; are less than 128 characters, so buffer overflow is possible if you pick
                                      # ; N < 128. Whether or not that's a concern is up to you.
                                      # .set VARS, 0x0020
                                      # ; Instead of VARS, you may set VARS_IN_BSS to have the linker automatically
                                      # ; allocate memory in the .bss segment for the vars. This will almost certainly
                                      # ; require creating a suitable linker script for your machine. An example for
                                      # ; Grape1 is provided. To use a linker script, you must define `LDSCR` in
                                      # ; make.sh to its path.
                                      # ; .set VARS_IN_BSS, 1
                                      # 
                                      # ; These variables define the MMIO addresses for accessing the keyboard.
                                      # ; KBDCR produces non-zero if there is a pending key event. KBD reads the
                                      # ; next key event.
                                      # .set KBDCR, 4
                                      # .set KBD,   5
                                      # 
                                      # ; This MMIO address writes the given character to the console. 0xA should be
                                      # ; treated as a newline control character.
                                      # .set DSP,   3
                                      # ; If a custom echo is needed instead, define CUSTOM_ECHO and implement it in
                                      # ; echo.s.
                                      # ; .set CUSTOM_ECHO, 1
                                      # 
                                      #                 .ifdef VARS_IN_BSS
                                      #                 .bss
                                      # VARS:           .space 46
                                      #                 .endif
                                      # 
                                      #                 .ifndef VARS
                                      #                 .err
                                      #                 .endif
                                      # 
                                      #                 .set DATA, VARS+6 ; ptr to IN, other vars are at negative offsets
                                      # 
                                      #                 ; most of these can probably actually be in registers
                                      #                 ; need to write more code and see how they are used.
                                      #                 ; Register allocation:
                                      #                 ; r0-r1 t
                                      #                 ; r2-r3 t. r2 sometimes holds hex data. r3 sometimes saves r4.
                                      #                 ; r4    text index (Y). t when text index not needed
                                      #                 ; r5    one-level subroutine nesting return address
                                      #                 ; r6    value of DATA
                                      #                 ; r7    return address
                                      #                 ; When r6 is not a nested return address, it is t
                                      #                 .set XAM_OFF,  -6 ; 2 bytes
                                      #                 .set ST_OFF,   -4 ; 2 bytes
                                      #                 .set MODE_OFF, -1 ; 1 byte
                                      # 
                                      #                 ; defn of _start is needed for MegaIng's annotated output
                                      #                 .text
                                      #                 .globl _start
0x8000:                               # _start:
                                      #                 .globl WOZ_RESET
0x8000: 48 83 4c 9f                   # WOZ_RESET:      movh    %rh4, 0x7F
0x8004: b0 04                         #                 call    1f
0x8006: 26 00                         #                 .word   DATA
0x8008: 1a dc                         # 1:              movx    %rx6, [%rx7]
                                      #                 .ifdef SET_VEC
                                      #                 call    1f
                                      # 1:              .word   DOUBLEFAULT
                                      #                 movx    %rx0, [%rx7]    ; DOUBLEFAULT -> r0
                                      #                 writecr %rx0, 4         ; DOUBLEFAULT -> INT_PC
                                      #                 .endif
0x800a: 48 22 4c 3f                   # NOTCR:          movh    %rh1, '_'       ; '_' -> r0
0x800e: 01 04                         #                 subh    %rh0, %rh1      ; cmp char =? '_'
0x8010: 80 16                         #                 je      BACKSPACE
0x8012: 41 01                         #                 subh    %rh0, 1         ; cmp char =? '`' ('`' = '_' + 1)
0x8014: 80 06                         #                 je      ESCAPE
0x8016: 40 81                         #                 addh    %rh4, 1         ; INY advance text index
0x8018: 83 12                         #                 jnn     NEXTCHAR        ; auto ESC if > 127
0x801a: 48 02 4c 1c                   # ESCAPE:         movh    %rh0, '\\'      ; '\' -> r0
0x801e: 4b 03                         #                 storeh  %rh0, DSP       ; output it
0x8020: 48 0a                         # GETLINE:        movh    %rh0, 10        ; LF -> r0
0x8022: 4b 03                         #                 storeh  %rh0, DSP       ; Output it
0x8024: 48 81                         #                 movh    %rh4, 1         ; initialize text index
0x8026: 41 81                         # BACKSPACE:      subh    %rh4, 1         ; Back up text index
0x8028: 92 f8                         #                 jn      GETLINE         ; Beyond start of line, reinit
0x802a: 58 28 5c 20                   # NEXTCHAR:       movx    %rx1, 0x100     ; 0x0100 -> r1
0x802e: 4a 04                         # 1:              loadh   %rh0, KBDCR     ; Key ready?
0x8030: 47 1f                         #                 testh   %rh0, -1
0x8032: 90 fc                         #                 jz      1b              ; loop until ready
0x8034: 5a 05                         #                 loadx   %rx0, KBD       ; Load character. Bit 8 should be 0 for press.
0x8036: 17 04                         #                 testx   %rx0, %rx1      ; char & 0x0100
0x8038: 91 f6                         #                 jnz     1b              ; loop if yes.
                                      #                 ; TODO: once we can get fixes for the keyboard component again,
                                      #                 ; this hopefully won't be necessary. It explicitly ignores SHIFT events.
0x803a: 48 35                         #                 movh    %rh1, 0x15      ; TC keycode for shift
0x803c: 03 04                         #                 cmph    %rh0, %rh1      ; key = SHIFT?
0x803e: 90 ec                         #                 je      NEXTCHAR        ; loop if yes.
0x8040: 09 30                         #                 movh    %rh1, %rh4      ; Y -> r1
0x8042: 10 38                         #                 addx    %rx1, %rx6      ; IN+Y -> r1
0x8044: 0b 04                         #                 movh    [%rx1], %rh0    ; add char to text buffer
0x8046: b0 ec                         #                 call    WOZ_ECHO_0      ; Output character
0x8048: 43 0a                         #                 cmph    %rh0, 10        ; LF? (TC Keyboards send 5, but ECHO_0 fixed)
0x804a: 91 c0                         #                 jne     NOTCR           ; no
0x804c: 49 9f                         #                 movh    %rh4, -1        ; Reset text index
0x804e: 48 0d                         #                 mov     %rh0, 0xD       ; D -> r0 For XAM mode
                                      #                 ; 0 = BLOCK XAM, 0xD = XAM, 0xC = STOR (need XAM > STOR)
0x8050: 59 3f                         # SETMODE:        movx    %rx1, MODE_OFF  ; MODE -> r1
0x8052: 10 38                         #                 addx    %rx1, %rx6      ; DATA+MODE -> r1
0x8054: 0b 04                         #                 movh    [%rx1], %rh0    ; r0 -> (DATA,MODE)
0x8056: 40 81                         # BLSKIP:         addh    %rh4, 1         ; advance text index
0x8058: 09 10                         # NEXTITEM:       movh    %rh0, %rh4      ; Y -> r0
0x805a: 10 18                         #                 addx    %rx0, %rx6      ; DATA+Y -> r0
0x805c: 0a 00                         #                 movh    %rh0, [%rx0]    ; (IN,Y) -> r0
0x805e: 43 05                         #                 cmph    %rh0, 5         ; LF?
0x8060: 90 c0                         #                 je      GETLINE         ; Yes, done this line
0x8062: 48 21 4c 2e                   #                 movh    %rh1, '.'       ; '.' -> r1
0x8066: 01 04                         #                 subh    %rh0, %rh1      ; char - '.' -> r0
0x8068: 94 ee                         #                 jb      BLSKIP          ; skip delimiters
0x806a: 90 e6                         #                 je      SETMODE         ; Set BLOCK XAM mode
0x806c: 43 0c                         #                 cmph    %rh0, ':' - '.' ; char - '.' =? ':' - '.'
0x806e: 90 e2                         #                 je      SETMODE         ; Yes, set STOR mode
0x8070: 48 21 4c 24                   #                 movh    %rh1, 'R' - '.' ; 'R' - '.' -> r1
0x8074: 03 04                         #                 cmph    %rh0, %rh1      ; char - '.' =? 'R' - '.'
0x8076: 80 4a                         #                 je      RUN             ; yes, run user program
0x8078: 58 40                         #                 movx    %rx2, 0         ; 0 -> r2 [L,H]
0x807a: 09 70                         #                 movh    %rh3, %rh4      ; Y -> r3 to check if changed later
0x807c: 19 10                         # NEXTHEX:        movx    %rx0, %rx4      ; Y -> r0
0x807e: 10 18                         #                 addx    %rx0, %rx6      ; IN+Y -> r0
0x8080: 0a 00                         #                 movh    %rh0, [%rx0]    ; (IN,Y) -> r0
0x8082: 48 21 4c 30                   #                 movh    %rh1, '0'       ; '0' -> r1, note '0' is 0x30
0x8086: 05 04                         #                 xorh    %rh0, %rh1      ; map '0'-'9' => 0-9, 'A'-'F' => 0x71-0x76
0x8088: 43 0a                         #                 cmph    %rh0, 10        ; r0 <? 10 (digit?)
0x808a: 84 0c                         #                 jb      DIGIT           ; yes.
0x808c: 49 3c 4c 29                   #                 movh    %rh1, 0x89      ; map 0x71-0x76 to 0xFA-0xFF
0x8090: 00 04                         #                 addh    %rh0, %rh1      ; ``
0x8092: 43 1a                         #                 cmph    %rh0, -6        ; Hex letter? (-6 = 0xFA)
0x8094: 84 12                         #                 jb      NOTHEX          ; No.
0x8096: 46 0f                         # DIGIT:          andh    %rh0, 0x0F      ; least significant nibble is hex digit
0x8098: 10 48                         #                 addx    %rx2, %rx2
0x809a: 10 48                         #                 addx    %rx2, %rx2
0x809c: 10 48                         #                 addx    %rx2, %rx2
0x809e: 10 48                         #                 addx    %rx2, %rx2      ; r2<<4 -> r2
0x80a0: 14 40                         #                 orx     %rx2, %rx0      ; r2|r0 -> r2
0x80a2: 40 81                         #                 addh    %rh4, 1         ; INY advance text index
0x80a4: 9e d8                         #                 jmp     NEXTHEX         ; Check next char for hex
0x80a6: 03 8c                         # NOTHEX:         cmph    %rh4, %rh3      ; Check if we read any digits
0x80a8: 90 72                         #                 je      ESCAPE          ; No, generate ESC sequence.
0x80aa: 59 3f                         #                 movx    %rx1, MODE_OFF  ; MODE -> r1
0x80ac: 10 38                         #                 addx    %rx1, %rx6      ; DATA+MODE -> r1
0x80ae: 0a 04                         #                 movh    %rh0, [%rx1]    ; (DATA,MODE) -> r0
0x80b0: 50 3b                         #                 addx    %rx1, XAM_OFF-MODE_OFF  ; DATA+XAM -> r1
0x80b2: 43 0c                         #                 cmph    %rh0, 0xC       ; STOR?
0x80b4: 81 14                         #                 jne     NOTSTOR         ; No.
0x80b6: 1a 04                         #                 movx    %rx0, [%rx1]    ; (DATA,ST) -> r0
0x80b8: 0b 40                         #                 movh    [%rx0], %rh2    ; least significant hex digits -> (ST)
0x80ba: 50 01                         #                 addx    %rx0, 1         ; increment ST
0x80bc: 1b 04                         #                 movx    [%rx1], %rx0    ; ST+1 -> (DATA,ST)
0x80be: 9e 9a                         #                 jmp     NEXTITEM
0x80c0: 59 1a                         # RUN:            movx    %rx0, XAM_OFF   ; XAM -> r0
0x80c2: 10 18                         #                 addx    %rx0, %rx6      ; DATA+XAM -> r0
0x80c4: 1a 00                         #                 movx    %rx0, [%rx0]    ; (DATA,XAM) -> r0
0x80c6: af 0e                         #                 jmp     %rx0            ; Run at current XAM index.
0x80c8: 84 30                         # NOTSTOR:        jb      XAMNEXT         ; from cmp (MODE),0xC less => block XAM
0x80ca: 1b 44                         #                 movx    [%rx1], %rx2    ; hex data -> (DATA,XAM)
0x80cc: 50 22                         #                 addx    %rx1, ST_OFF-XAM_OFF    ; DATA+ST -> r1
0x80ce: 1b 44                         #                 movx    [%rx1], %rx2    ; hex data -> (DATA,ST)
0x80d0: 50 3e                         #                 addx    %rx1, XAM_OFF-ST_OFF    ; DATA+XAM -> r1
0x80d2: 15 6c                         #                 xorx    %rx3, %rx3      ; set Z flag
0x80d4: 81 18                         # NXTPRNT:        jnz     PRDATA          ; NZ means no address to print
0x80d6: 48 0a                         #                 movh    %rh0, 10        ; LF -> r0
0x80d8: 4b 03                         #                 storeh  %rh0, DSP       ; Output it
0x80da: 50 21                         #                 addx    %rx1, 1         ; DATA+XAM{H} -> r1
0x80dc: 0a 04                         #                 movh    %rh0, [%rx1]    ; (DATA,XAMH) -> r0
0x80de: b0 2c                         #                 call    PRBYTE          ; Output it in hex format
0x80e0: 51 21                         #                 subx    %rx1, 1         ; DATA+XAM -> r1
0x80e2: 0a 04                         #                 movh    %rh0, [%rx1]    ; (DATA,XAM) -> r0
0x80e4: b0 26                         #                 call    PRBYTE          ; Output it in hex format
0x80e6: 48 01 4c 1a                   #                 movh    %rh0, ':'       ; ':' -> r0
0x80ea: 4b 03                         #                 storeh  %rh0, DSP       ; Output it
0x80ec: 48 01 4c 00                   # PRDATA:         movh    %rh0, ' '       ; ' ' -> r0
0x80f0: 4b 03                         #                 storeh  %rh0, DSP       ; Output it
0x80f2: 1a 04                         #                 movx    %rx0, [%rx1]    ; (DATA,XAM) -> r0
0x80f4: 0a 00                         #                 movh    %rh0, [%rx0]    ; ((DATA,XAM)) -> r0
0x80f6: b0 14                         #                 call    PRBYTE          ; Output it in hex format
0x80f8: 4d cd                         # XAMNEXT:        pushh   0xD             ; Reset MODE to XAM mode
0x80fa: 50 c1                         #                 addx    %rx6, 1         ; restore %rx6 after push
0x80fc: 1a 04                         #                 movx    %rx0, [%rx1]    ; (DATA,XAM) -> r0
0x80fe: 13 08                         #                 cmpx    %rx0, %rx2      ; compare (XAM) to hex data
0x8100: 95 58                         #                 jae     NEXTITEM        ; not less, no more data to output
0x8102: 50 01                         #                 addx    %rx0, 1         ; (XAM)+1 -> r0
0x8104: 1b 04                         #                 movx    [%rx1], %rx0    ; (XAM)+1 -> (XAM)
0x8106: 56 07                         # MOD8CHK:        andx    %rx0, 0x07      ; (XAM) mod 8
0x8108: 9e cc                         #                 jmp     NXTPRNT
0x810a: 09 60                         # PRBYTE:         movh    %rh3, %rh0      ; r0 -> r3 to save around PRHEX
0x810c: 19 bc                         #                 movx    %rx5, %rx7      ; r7 -> r5 to save ret addr
                                      #                 ; This code MASSIVELY benefits from conditional use of EXOP.
                                      #                 ; Right-shift %rh0 by 4, by left shifting %rx0 by 4 and then
                                      #                 ; extracting the upper byte through memory.
                                      #                 ; The memory that we use is (MODE), which is currently
                                      #                 ; irrelevant since it will be reset by NEWITEM.
0x810e: 10 00                         #                 addx    %rx0, %rx0
0x8110: 10 00                         #                 addx    %rx0, %rx0
0x8112: 10 00                         #                 addx    %rx0, %rx0
0x8114: 10 00                         #                 addx    %rx0, %rx0
0x8116: 1d c0                         #                 pushx   %rx0            ; r0<<4 -> (MODE)
0x8118: 50 c1                         #                 addx    %rx6, 1
0x811a: 0c 18                         #                 poph    %rh0            ; r0>>4 -> r0
0x811c: b0 06                         #                 call    PRHEX           ; Output hex digit
0x811e: 19 f4                         #                 movx    %rx7, %rx5      ; restore return address
0x8120: 09 0c                         #                 movh    %rh0, %rh3      ; restore LSD
0x8122: 46 0f                         # PRHEX:          andh    %rh0, 0x0F      ; mask LSD
0x8124: 43 0a                         #                 cmph    %rh0, 10        ; digit?
0x8126: 84 04                         #                 jb      1f              ; yes, don't add letter offset
0x8128: 40 07                         #                 addh    %rh0, 7         ; 'A' - '0' + 0xA
                                      # 1:              ; This code would benefit from FI or really just anyway way
                                      #                 ; of easily adding '0' without needing a register.
0x812a: 40 0c                         #                 addh    %rh0, 0xC
0x812c: 40 0c                         #                 addh    %rh0, 0xC
0x812e: 40 0c                         #                 addh    %rh0, 0xC       ; r0 + '0' -> r0
0x8130: 40 0c                         #                 addh    %rh0, 0xC
0x8132: 43 05                         # WOZ_ECHO_0:     cmph    %rh0, 5         ; TCLF?
0x8134: 81 04                         #                 jne     WOZ_ECHO        ; no, just echo it
0x8136: 40 05                         #                 addh    %rh0, 5         ; TCLF => LF
                                      #                 .globl WOZ_ECHO
0x8138: 4b 03                         # WOZ_ECHO:       storeh  %rh0, DSP       ; output character
0x813a: af ee                         #                 ret
